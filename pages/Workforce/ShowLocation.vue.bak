<template>
  <div>
    <div>
      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded m-3" @click="navToDashboard">Go to Dashboard</button>
      <button @click="getTrailHandler">Get Trail</button>
    </div>
    <div ref="map" style="width: 100%; height: 400px"></div>
  </div>
</template>

<script>
export default {
  name: 'ShowLocation',
  head: {
    script: [
      {
        type: 'text/javascript',
        src: `https://maps.googleapis.com/maps/api/js?key=AIzaSyD5OPNPtE5honF4E7LyLyND1PNMf-bmP24&callback=initMap&v=weekly`,
        async: true,
        defer: true,
        body: true,
      },
    ],
  },
  data() {
    return {
      map: null,
      infoWindow: null,
      marker_list: [],
      count: 0,
      locArr: [],
      Remove_locationButton: null,
      token: this.$auth.strategy.token.get(),
    }
  },

  beforeMount() {
    window.initMap = this.initMap
  },

  methods: {
    navToDashboard() {
      this.$router.push('/dashboard')
    },
    initMap() {
      // Create a map object
      const map = new window.google.maps.Map(this.$refs.map, {
        center: { lat: 0, lng: 0 },
        zoom: 15,
      })

      this.infowindow = new window.google.maps.InfoWindow({})

      // Try to get the user's current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            }

            // Set the map center to the user's location
            map.setCenter(pos)
            this.locArr.push(pos)

            this.map = map

            // Add a marker at the user's location
            this.marker_list = []
            this.marker_list.push(
              new window.google.maps.Marker({
                position: pos,
                map: this.map,
                title: 'Your Location',
              })
            )

            const locData = {
              userID: 'S2023',
              locations: [
                {
                  latitude: pos.lat,
                  longitude: pos.lng,
                },
              ],
            }

            // Send data to backend
            this.$axios
              .post('/workforce/locationdata', locData)
              .then((response) => {
                console.log(response.data)

                // Start periodic location tracking
                setInterval(this.updateCurrentLocation.bind(this), 10 * 1000)
              })
              .catch((error) => {
                console.error(error)
              })
          },
          () => {
            // Handle location retrieval error
            console.log('Error: The Geolocation service failed.')
          }
        )
      } else {
        // Browser doesn't support Geolocation
        console.log("Error: Your browser doesn't support geolocation.")
      }
    },

    updateCurrentLocation() {
      console.log('updateCurrentLocation Entered')

      // Try to get the user's current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            }

            console.log('updateCurrentLocation: pos = ', pos)
            console.log(
              'updateCurrentLocation: this.locArr.toString() = ',
              this.locArr.toString()
            )

            if (
              this.locArr.length > 0 &&
              this.calcCrow(
                pos.lat,
                pos.lng,
                this.locArr[this.locArr.length - 1].lat,
                this.locArr[this.locArr.length - 1].lng
              ) < 0.1
            ) {
              console.log('same location... not updating')
              return
            }

            this.locArr.push(pos)

            // Send data to backend
            const locData = {
              userID: 'S2023',
              locations: [
                {
                  latitude: pos.lat,
                  longitude: pos.lng,
                },
              ],
            }

            this.$axios
              .post('/workforce/locationdata', locData)
              .then((response) => {
                console.log(response.data)
              })
              .catch((error) => {
                console.error(error)
              })
          },
          () => {
            // Handle location retrieval error
            console.log('Error: The Geolocation service failed.')
          }
        )
      } else {
        // Browser doesn't support Geolocation
        console.log("Error: Your browser doesn't support geolocation.")
      }
    },

    getTrailHandler() {
      // Draw the already collected trail.
	this.infoWindow = new google.maps.InfoWindow({});
      const self = this
      for (let count = 0; count < self.locArr.length; count++) {
        const marker = new window.google.maps.Marker({
          position: new window.google.maps.LatLng(
            self.locArr[count].lat,
            self.locArr[count].lng
          ),
          map: self.map,
          animation: window.google.maps.Animation.DROP,
          title: 'I was at ' + count.toString(), // locations[count][0]
        })

        // gotoCurrentLocation();

        this.infoWindow.setContent('I was at' + count.toString())
        this.infoWindow.open(self.map, marker)

        window.google.maps.event.addListener(
          marker,
          'click',
          (function (marker, count) {
            return function () {
              this.infoWindow.setContent('I was at' + count.toString())
              this.infoWindow.open(this.map, marker)
            }
          })(marker, count)
        )
      }
    },

    // TBD : it displays info to user in infoWindow
    handleLocationError(browserHasGeolocation, infoWindow, pos) {
      this.infoWindow.setPosition(pos)
      this.infoWindow.setContent(
        browserHasGeolocation
          ? 'Error: The Geolocation service failed.'
          : "Error: Your browser doesn't support geolocation."
      )
      this.infoWindow.open(this.map)
    },
    // This function takes in latitude and longitude of two location and returns the distance between them as the crow flies (in km)
    calcCrow(lat1, lon1, lat2, lon2) {
      const R = 6371 // km
      const dLat = this.toRad(lat2 - lat1)
      const dLon = this.toRad(lon2 - lon1)
      const lat1rad = this.toRad(lat1)
      const lat2rad = this.toRad(lat2)

      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.sin(dLon / 2) *
          Math.sin(dLon / 2) *
          Math.cos(lat1rad) *
          Math.cos(lat2rad)
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
      const d = R * c
      return d
    },

    // Converts numeric degrees to radians
    toRad(Value) {
      return (Value * Math.PI) / 180
    },
  },
}
</script>
